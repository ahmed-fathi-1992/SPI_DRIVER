
ECU_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000238  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000238  000002ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000a0f  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dae  00000000  00000000  00000b56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004e0  00000000  00000000  00001904  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036a  00000000  00000000  00001de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00002150  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cf  00000000  00000000  0000238c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009c3  00000000  00000000  0000285b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000321e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		i++;
	}
}

void UART_receiveString(uint8_t *Str)
{
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
	uint8_t i = 0;
	Str[i] = UART_recieveByte();
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
	while(Str[i] != '#')
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
	}
}

void UART_receiveString(uint8_t *Str)
{
	uint8_t i = 0;
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
	{
		i++;
		Str[i] = UART_recieveByte();
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

void UART_receiveString(uint8_t *Str)
{
	uint8_t i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
}
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 1a 01 	jmp	0x234	; 0x234 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "softwareDelay.h"

int main(void)
{
	//char Received=0x00;
	SPI_Init_(Interrupt_Enable,SPI_Enable,LSB,Master,Leading_Edge_Rising,Leading_Edge_Sample,Frequency_16);
  6c:	cc 24       	eor	r12, r12
  6e:	c3 94       	inc	r12
  70:	e1 2c       	mov	r14, r1
  72:	00 e0       	ldi	r16, 0x00	; 0
  74:	20 e1       	ldi	r18, 0x10	; 16
  76:	40 e2       	ldi	r20, 0x20	; 32
  78:	60 e4       	ldi	r22, 0x40	; 64
  7a:	80 e8       	ldi	r24, 0x80	; 128
  7c:	0e 94 df 00 	call	0x1be	; 0x1be <SPI_Init_>
	
	softwareDelayMs(3000);
  80:	68 eb       	ldi	r22, 0xB8	; 184
  82:	7b e0       	ldi	r23, 0x0B	; 11
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	0e 94 8b 00 	call	0x116	; 0x116 <softwareDelayMs>
	while(1)
	{

		softwareDelayMs(1000);
  8c:	68 ee       	ldi	r22, 0xE8	; 232
  8e:	73 e0       	ldi	r23, 0x03	; 3
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 8b 00 	call	0x116	; 0x116 <softwareDelayMs>
		SPDR=0x66;
  98:	86 e6       	ldi	r24, 0x66	; 102
  9a:	8f b9       	out	0x0f, r24	; 15
		
		while(!(SPSR& 0x80));
  9c:	77 9b       	sbis	0x0e, 7	; 14
  9e:	fe cf       	rjmp	.-4      	; 0x9c <main+0x30>
		softwareDelayMs(2000);
  a0:	60 ed       	ldi	r22, 0xD0	; 208
  a2:	77 e0       	ldi	r23, 0x07	; 7
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 8b 00 	call	0x116	; 0x116 <softwareDelayMs>
		SPDR=0x88;
  ac:	88 e8       	ldi	r24, 0x88	; 136
  ae:	8f b9       	out	0x0f, r24	; 15
		
		while(!(SPSR& 0x80));
  b0:	77 9b       	sbis	0x0e, 7	; 14
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <main+0x44>
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <main+0x48>

000000b6 <gpioPinDirection>:
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
		switch (u8_port)
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	81 f0       	breq	.+32     	; 0xda <gpioPinDirection+0x24>
  ba:	28 f0       	brcs	.+10     	; 0xc6 <gpioPinDirection+0x10>
  bc:	82 30       	cpi	r24, 0x02	; 2
  be:	b9 f0       	breq	.+46     	; 0xee <gpioPinDirection+0x38>
  c0:	83 30       	cpi	r24, 0x03	; 3
  c2:	41 f5       	brne	.+80     	; 0x114 <gpioPinDirection+0x5e>
  c4:	1e c0       	rjmp	.+60     	; 0x102 <gpioPinDirection+0x4c>
		{
			case 0:
			PORTA_DIR = PORTA_DIR & (~u8_pins);
  c6:	8a b3       	in	r24, 0x1a	; 26
  c8:	96 2f       	mov	r25, r22
  ca:	90 95       	com	r25
  cc:	89 23       	and	r24, r25
  ce:	8a bb       	out	0x1a, r24	; 26
			PORTA_DIR = PORTA_DIR |(u8_pins & u8_direction);
  d0:	8a b3       	in	r24, 0x1a	; 26
  d2:	64 23       	and	r22, r20
  d4:	68 2b       	or	r22, r24
  d6:	6a bb       	out	0x1a, r22	; 26
			break;
  d8:	08 95       	ret
			case 1:
			PORTB_DIR = PORTB_DIR & (~u8_pins);
  da:	87 b3       	in	r24, 0x17	; 23
  dc:	96 2f       	mov	r25, r22
  de:	90 95       	com	r25
  e0:	89 23       	and	r24, r25
  e2:	87 bb       	out	0x17, r24	; 23
			PORTB_DIR = PORTB_DIR |(u8_pins & u8_direction);
  e4:	87 b3       	in	r24, 0x17	; 23
  e6:	64 23       	and	r22, r20
  e8:	68 2b       	or	r22, r24
  ea:	67 bb       	out	0x17, r22	; 23
			break;
  ec:	08 95       	ret
			case 2:
			PORTC_DIR = PORTC_DIR & (~u8_pins);
  ee:	84 b3       	in	r24, 0x14	; 20
  f0:	96 2f       	mov	r25, r22
  f2:	90 95       	com	r25
  f4:	89 23       	and	r24, r25
  f6:	84 bb       	out	0x14, r24	; 20
			PORTC_DIR = PORTC_DIR |(u8_pins & u8_direction);
  f8:	84 b3       	in	r24, 0x14	; 20
  fa:	64 23       	and	r22, r20
  fc:	68 2b       	or	r22, r24
  fe:	64 bb       	out	0x14, r22	; 20
			break;
 100:	08 95       	ret
			case 3:
			PORTD_DIR = PORTD_DIR & (~u8_pins);
 102:	81 b3       	in	r24, 0x11	; 17
 104:	96 2f       	mov	r25, r22
 106:	90 95       	com	r25
 108:	89 23       	and	r24, r25
 10a:	81 bb       	out	0x11, r24	; 17
			PORTD_DIR = PORTD_DIR |(u8_pins & u8_direction);
 10c:	81 b3       	in	r24, 0x11	; 17
 10e:	64 23       	and	r22, r20
 110:	68 2b       	or	r22, r24
 112:	61 bb       	out	0x11, r22	; 17
 114:	08 95       	ret

00000116 <softwareDelayMs>:
 */ 

#include "softwareDelay.h "

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
 116:	8f 92       	push	r8
 118:	9f 92       	push	r9
 11a:	af 92       	push	r10
 11c:	bf 92       	push	r11
 11e:	ef 92       	push	r14
 120:	ff 92       	push	r15
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	00 d0       	rcall	.+0      	; 0x12c <softwareDelayMs+0x16>
 12c:	00 d0       	rcall	.+0      	; 0x12e <softwareDelayMs+0x18>
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
		volatile uint32_t d=0;
 132:	19 82       	std	Y+1, r1	; 0x01
 134:	1a 82       	std	Y+2, r1	; 0x02
 136:	1b 82       	std	Y+3, r1	; 0x03
 138:	1c 82       	std	Y+4, r1	; 0x04
		for(int y=0;y<u32_delay_in_ms;y++)
 13a:	61 15       	cp	r22, r1
 13c:	71 05       	cpc	r23, r1
 13e:	81 05       	cpc	r24, r1
 140:	91 05       	cpc	r25, r1
 142:	19 f5       	brne	.+70     	; 0x18a <softwareDelayMs+0x74>
 144:	2d c0       	rjmp	.+90     	; 0x1a0 <softwareDelayMs+0x8a>
		{			
			for(int z=0;z<19;z++)
			{
				for(int w=0;w<16;w++)
				{
					d++;					
 146:	89 80       	ldd	r8, Y+1	; 0x01
 148:	9a 80       	ldd	r9, Y+2	; 0x02
 14a:	ab 80       	ldd	r10, Y+3	; 0x03
 14c:	bc 80       	ldd	r11, Y+4	; 0x04
 14e:	af ef       	ldi	r26, 0xFF	; 255
 150:	8a 1a       	sub	r8, r26
 152:	9a 0a       	sbc	r9, r26
 154:	aa 0a       	sbc	r10, r26
 156:	ba 0a       	sbc	r11, r26
 158:	89 82       	std	Y+1, r8	; 0x01
 15a:	9a 82       	std	Y+2, r9	; 0x02
 15c:	ab 82       	std	Y+3, r10	; 0x03
 15e:	bc 82       	std	Y+4, r11	; 0x04
 160:	21 50       	subi	r18, 0x01	; 1
 162:	31 09       	sbc	r19, r1
		volatile uint32_t d=0;
		for(int y=0;y<u32_delay_in_ms;y++)
		{			
			for(int z=0;z<19;z++)
			{
				for(int w=0;w<16;w++)
 164:	81 f7       	brne	.-32     	; 0x146 <softwareDelayMs+0x30>
 166:	41 50       	subi	r20, 0x01	; 1
 168:	51 09       	sbc	r21, r1
void softwareDelayMs(uint32_t u32_delay_in_ms)
{
		volatile uint32_t d=0;
		for(int y=0;y<u32_delay_in_ms;y++)
		{			
			for(int z=0;z<19;z++)
 16a:	11 f0       	breq	.+4      	; 0x170 <softwareDelayMs+0x5a>
 */ 

#include "softwareDelay.h "

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
 16c:	9f 01       	movw	r18, r30
 16e:	eb cf       	rjmp	.-42     	; 0x146 <softwareDelayMs+0x30>
		volatile uint32_t d=0;
		for(int y=0;y<u32_delay_in_ms;y++)
 170:	0f 5f       	subi	r16, 0xFF	; 255
 172:	1f 4f       	sbci	r17, 0xFF	; 255
 174:	48 01       	movw	r8, r16
 176:	aa 24       	eor	r10, r10
 178:	97 fc       	sbrc	r9, 7
 17a:	a0 94       	com	r10
 17c:	ba 2c       	mov	r11, r10
 17e:	86 16       	cp	r8, r22
 180:	97 06       	cpc	r9, r23
 182:	a8 06       	cpc	r10, r24
 184:	b9 06       	cpc	r11, r25
 186:	50 f0       	brcs	.+20     	; 0x19c <softwareDelayMs+0x86>
 188:	0b c0       	rjmp	.+22     	; 0x1a0 <softwareDelayMs+0x8a>
 18a:	00 e0       	ldi	r16, 0x00	; 0
 18c:	10 e0       	ldi	r17, 0x00	; 0
 */ 

#include "softwareDelay.h "

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
 18e:	0f 2e       	mov	r0, r31
 190:	f3 e1       	ldi	r31, 0x13	; 19
 192:	ef 2e       	mov	r14, r31
 194:	f1 2c       	mov	r15, r1
 196:	f0 2d       	mov	r31, r0
 198:	e0 e1       	ldi	r30, 0x10	; 16
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	a7 01       	movw	r20, r14
 19e:	e6 cf       	rjmp	.-52     	; 0x16c <softwareDelayMs+0x56>
			}
		}
		
	
	
}
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	0f 90       	pop	r0
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	ff 90       	pop	r15
 1b2:	ef 90       	pop	r14
 1b4:	bf 90       	pop	r11
 1b6:	af 90       	pop	r10
 1b8:	9f 90       	pop	r9
 1ba:	8f 90       	pop	r8
 1bc:	08 95       	ret

000001be <SPI_Init_>:

#include "SPI_.h"


void SPI_Init_(Interrupt_State interrupt_state,SPI_En_State SPI_state , Data_Order data_order ,SPI_Mode SPI_mode ,Clock_Polarity clock_Polarity ,Clock_Phase clock_phase , SPI_Clock_Rate clock_rate)
{
 1be:	cf 92       	push	r12
 1c0:	ef 92       	push	r14
 1c2:	0f 93       	push	r16
	//SPCR =0b01010001;
	SPCR = SPCR|(interrupt_state | SPI_state | data_order | SPI_mode | clock_Polarity | clock_phase | clock_rate);	
 1c4:	9d b1       	in	r25, 0x0d	; 13
 1c6:	89 2b       	or	r24, r25
 1c8:	68 2b       	or	r22, r24
 1ca:	46 2b       	or	r20, r22
 1cc:	42 2b       	or	r20, r18
 1ce:	04 2b       	or	r16, r20
 1d0:	e0 2a       	or	r14, r16
 1d2:	ce 28       	or	r12, r14
 1d4:	cd b8       	out	0x0d, r12	; 13
	//Bit 4  MSTR: Master/Slave Select   1:Master 0:slave
	//Bit 3  CPOL: Clock Polarity
	//Bit 2  CPHA: Clock Phase
	//Bits 1, 0  SPR1, SPR0: SPI Clock Rate Select 1 and 0

	if(SPI_mode == Master)
 1d6:	20 31       	cpi	r18, 0x10	; 16
 1d8:	a9 f4       	brne	.+42     	; 0x204 <SPI_Init_+0x46>
	{gpioPinDirection(SPI_MOSI_PORT, SPI_MOSI_PIN, OUTPUT);
 1da:	4f ef       	ldi	r20, 0xFF	; 255
 1dc:	60 e2       	ldi	r22, 0x20	; 32
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0e 94 5b 00 	call	0xb6	; 0xb6 <gpioPinDirection>
	 gpioPinDirection(SPI_MISO_PORT, SPI_MISO_PIN, INPUT);	 	
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	60 e4       	ldi	r22, 0x40	; 64
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 5b 00 	call	0xb6	; 0xb6 <gpioPinDirection>
	 gpioPinDirection(SPI_SCK_PORT, SPI_SCK_PIN, OUTPUT);
 1ee:	4f ef       	ldi	r20, 0xFF	; 255
 1f0:	60 e8       	ldi	r22, 0x80	; 128
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 5b 00 	call	0xb6	; 0xb6 <gpioPinDirection>
	 gpioPinDirection(SPI_SS_PORT, SPI_SS_PIN, OUTPUT);	
 1f8:	4f ef       	ldi	r20, 0xFF	; 255
 1fa:	60 e1       	ldi	r22, 0x10	; 16
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 5b 00 	call	0xb6	; 0xb6 <gpioPinDirection>
 202:	14 c0       	rjmp	.+40     	; 0x22c <SPI_Init_+0x6e>
	}else
	{gpioPinDirection(SPI_MOSI_PORT, SPI_MOSI_PIN, INPUT);
 204:	40 e0       	ldi	r20, 0x00	; 0
 206:	60 e2       	ldi	r22, 0x20	; 32
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	0e 94 5b 00 	call	0xb6	; 0xb6 <gpioPinDirection>
	 gpioPinDirection(SPI_MISO_PORT, SPI_MISO_PIN, OUTPUT);
 20e:	4f ef       	ldi	r20, 0xFF	; 255
 210:	60 e4       	ldi	r22, 0x40	; 64
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	0e 94 5b 00 	call	0xb6	; 0xb6 <gpioPinDirection>
	 gpioPinDirection(SPI_SCK_PORT, SPI_SCK_PIN, INPUT);
 218:	40 e0       	ldi	r20, 0x00	; 0
 21a:	60 e8       	ldi	r22, 0x80	; 128
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 5b 00 	call	0xb6	; 0xb6 <gpioPinDirection>
	 gpioPinDirection(SPI_SS_PORT, SPI_SS_PIN, INPUT);
 222:	40 e0       	ldi	r20, 0x00	; 0
 224:	60 e1       	ldi	r22, 0x10	; 16
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	0e 94 5b 00 	call	0xb6	; 0xb6 <gpioPinDirection>
	
    

	
		
}
 22c:	0f 91       	pop	r16
 22e:	ef 90       	pop	r14
 230:	cf 90       	pop	r12
 232:	08 95       	ret

00000234 <_exit>:
 234:	f8 94       	cli

00000236 <__stop_program>:
 236:	ff cf       	rjmp	.-2      	; 0x236 <__stop_program>
